Source: python-nltools
Section: python
Priority: optional
Maintainer: Guenter Bartsch <guenter@zamia.org>
Build-Depends: debhelper (>= 9), dh-python, python-all, python-setuptools, python3-all, python3-setuptools
Standards-Version: 3.9.8
Homepage: https://github.com/gooofy/py-nltools
X-Python-Version: >= 2.6
X-Python3-Version: >= 3.2
#Vcs-Git: https://anonscm.debian.org/git/python-modules/packages/python-nltools.git
#Vcs-Browser: https://anonscm.debian.org/cgit/python-modules/packages/python-nltools.git/
#Testsuite: autopkgtest-pkg-python

Package: python-nltools
Architecture: all
Depends: ${python:Depends}, ${misc:Depends}, python-webrtcvad, python-requests, python-espeakng, python-marytts, python-future
Suggests: python-nltools-doc
Description: A collection of basic python modules for spoken natural language processing (Python 2)
 A collection of abstraction layers and support functions that form the natural
 language processing foundation of the Zamia AI project:
 phonetics: translation functions between various phonetic alphabets (IPA,
            X-SAMPA, X-ARPABET, ...)
 tts: abstraction layer towards using eSpeak NG, MaryTTS, SVOX Pico TTS or a
      remote TTS server and sequitur g2p
 asr: abstraction layer towards using kaldi-asr and pocketsphinx, models can be
      found here: http://goofy.zamia.org/voxforge/
 sequiturclient: g2p using sequitur
 pulseplayer: audio playback through pulseaudio
 pulserecorder: audio recording through pulseaudio
 tokenizer: english and german word tokenizer aimed at spoken language
            applications
 threadpool: simple thread pool implementation
 vad: Voice Activity Detection finite state machine based on webrtc VAD
 macro_engine: Simple macro engine aimed at generating natural language
               expansions
 .
 This package installs the library for Python 2.

Package: python3-nltools
Architecture: all
Depends: ${python3:Depends}, ${misc:Depends}, python3-webrtcvad, python3-requests, python3-espeakng, python3-marytts
Suggests: python-nltools-doc
Description: A collection of basic python modules for spoken natural language processing (Python 3)
 A collection of abstraction layers and support functions that form the natural
 language processing foundation of the Zamia AI project:
 phonetics: translation functions between various phonetic alphabets (IPA,
            X-SAMPA, X-ARPABET, ...)
 tts: abstraction layer towards using eSpeak NG, MaryTTS, SVOX Pico TTS or a
      remote TTS server and sequitur g2p
 asr: abstraction layer towards using kaldi-asr and pocketsphinx, models can be
      found here: http://goofy.zamia.org/voxforge/
 sequiturclient: g2p using sequitur
 pulseplayer: audio playback through pulseaudio
 pulserecorder: audio recording through pulseaudio
 tokenizer: english and german word tokenizer aimed at spoken language
            applications
 threadpool: simple thread pool implementation
 vad: Voice Activity Detection finite state machine based on webrtc VAD
 macro_engine: Simple macro engine aimed at generating natural language
               expansions
 .
 This package installs the library for Python 3.

Package: python-nltools-doc
Architecture: all
Section: doc
Depends: ${sphinxdoc:Depends}, ${misc:Depends}
Description: A collection of basic python modules for spoken natural language processing (common documentation)
 A collection of abstraction layers and support functions that form the natural
 language processing foundation of the Zamia AI project:
 phonetics: translation functions between various phonetic alphabets (IPA,
            X-SAMPA, X-ARPABET, ..)
 tts: abstraction layer towards using eSpeak NG, MaryTTS, SVOX Pico TTS or a
      remote TTS server and sequitur g2p
 asr: abstraction layer towards using kaldi-asr and pocketsphinx, models can be
      found here: http://goofy.zamia.org/voxforge/
 sequiturclient: g2p using sequitur
 pulseplayer: audio playback through pulseaudio
 pulserecorder: audio recording through pulseaudio
 tokenizer: english and german word tokenizer aimed at spoken language
            applications
 threadpool: simple thread pool implementation
 vad: Voice Activity Detection finite state machine based on webrtc VAD
 macro_engine: Simple macro engine aimed at generating natural language
               expansions
 .
 This is the common documentation package.
